type ApiError = record {
  tag : opt text;
  info : opt vec text;
  method_name : opt text;
  message : opt text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  NotFound;
  ValidationError : vec ValidationResponse;
  Unsupported;
  Unauthorized;
  Unexpected;
  NotImplemented;
  BadRequest;
};
type FriendRequest = record {
  to : principal;
  created_at : nat64;
  requested_by : principal;
  notification_id : opt nat64;
  message : text;
};
type FriendRequestFilter = variant {
  Requestor : principal;
  Recipient : principal;
};
type FriendRequestSort = variant { CreatedAt : SortDirection };
type PagedResponse = record {
  total : nat64;
  data : vec record { nat64; FriendRequest };
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type Result = variant {
  Ok : vec record { nat64; FriendRequest };
  Err : ApiError;
};
type Result_1 = variant { Ok : PagedResponse; Err : ApiError };
type Result_2 = variant {
  Ok : opt record { nat64; FriendRequest };
  Err : ApiError;
};
type Result_3 = variant {
  Ok : record { nat64; FriendRequest };
  Err : ApiError;
};
type Result_4 = variant { Ok : bool; Err : ApiError };
type Result_5 = variant { Ok; Err : ApiError };
type Result_6 = variant { Ok : nat64; Err : ApiError };
type SortDirection = variant { Asc; Desc };
type ValidationResponse = record { field : text; message : text };
service : (vec principal) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  filter : (vec FriendRequestFilter) -> (Result) query;
  filter_paginated : (
      nat64,
      nat64,
      FriendRequestSort,
      vec FriendRequestFilter,
    ) -> (Result_1) query;
  find : (vec FriendRequestFilter) -> (Result_2) query;
  get : (nat64) -> (Result_3) query;
  get_all : () -> (Result) query;
  get_many : (vec nat64) -> (Result) query;
  get_paginated : (nat64, nat64, FriendRequestSort) -> (Result_1) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  insert : (FriendRequest) -> (Result_3);
  insert_by_key : (nat64, FriendRequest) -> (Result_3);
  insert_many : (vec FriendRequest) -> (Result);
  remove : (nat64) -> (Result_4);
  remove_many : (vec nat64) -> (Result_5);
  size : () -> (Result_6) query;
  update : (nat64, FriendRequest) -> (Result_3);
  update_many : (vec record { nat64; FriendRequest }) -> (Result);
}