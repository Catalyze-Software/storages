type Address = record {
  street : text;
  country : text;
  city : text;
  postal_code : text;
  label : text;
  state_or_province : text;
  house_number : text;
  house_number_addition : text;
};
type ApiError = record {
  tag : opt text;
  info : opt vec text;
  method_name : opt text;
  message : opt text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  NotFound;
  ValidationError : vec ValidationResponse;
  Unsupported;
  Unauthorized;
  Unexpected;
  NotImplemented;
  BadRequest;
};
type Asset = variant { Url : text; None; CanisterStorage : CanisterStorage };
type CanisterStorage = variant { None; Manifest : Manifest; Chunk : ChunkData };
type ChunkData = record {
  chunk_id : nat64;
  canister : principal;
  index : nat64;
};
type DateRange = record { end_date : nat64; start_date : nat64 };
type GatedType = variant { Neuron : vec NeuronGated; Token : vec TokenGated };
type GroupFilter = variant {
  Ids : vec nat64;
  Tag : nat32;
  UpdatedOn : DateRange;
  Name : text;
  None;
  OptionallyInvited : principal;
  Owner : principal;
  CreatedOn : DateRange;
};
type GroupSort = variant {
  UpdatedOn : SortDirection;
  MemberCount : SortDirection;
  Name : SortDirection;
  CreatedOn : SortDirection;
};
type GroupWithMembers = record {
  updated_on : nat64;
  references : References;
  members : Members;
  owner : principal;
  metadata : Metadata;
  matrix_space_id : text;
  created_by : principal;
  created_on : nat64;
  privacy : Privacy;
  wallets : vec record { principal; text };
  events : vec nat64;
  is_deleted : bool;
};
type Invite = record {
  updated_at : nat64;
  invite_type : InviteType;
  created_at : nat64;
  notification_id : opt nat64;
};
type InviteType = variant { OwnerRequest; UserRequest };
type Join = record { updated_at : nat64; created_at : nat64; roles : vec text };
type Location = variant {
  None;
  Digital : text;
  Physical : PhysicalLocation;
  MultiLocation : MultiLocation;
};
type Manifest = record { entries : vec ChunkData };
type Members = record {
  special_members : vec record { principal; text };
  members : vec record { principal; Join };
  invites : vec record { principal; Invite };
  roles : vec Role;
};
type Metadata = record {
  banner_image : Asset;
  name : text;
  description : text;
  website : text;
  image : Asset;
  location : Location;
};
type MultiLocation = record { physical : PhysicalLocation; digital : text };
type NeuronGated = record {
  governance_canister : principal;
  name : text;
  description : text;
  ledger_canister : principal;
  rules : vec NeuronGatedRules;
};
type NeuronGatedRules = variant {
  IsDisolving : bool;
  MinStake : nat64;
  MinAge : nat64;
  MinDissolveDelay : nat64;
};
type PagedResponse = record {
  total : nat64;
  data : vec record { nat64; GroupWithMembers };
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type Permission = record {
  name : text;
  actions : PermissionActions;
  protected : bool;
};
type PermissionActions = record {
  edit : bool;
  read : bool;
  delete : bool;
  write : bool;
};
type PhysicalLocation = record {
  longtitude : float32;
  address : Address;
  lattitude : float32;
};
type Privacy = record {
  privacy_type : PrivacyType;
  privacy_gated_type_amount : opt nat64;
};
type PrivacyType = variant { Gated : GatedType; Private; Public; InviteOnly };
type References = record { tags : vec nat32; notification_id : opt nat64 };
type Result = variant { Ok : vec Shard; Err : ApiError };
type Result_1 = variant {
  Ok : vec record { nat64; GroupWithMembers };
  Err : ApiError;
};
type Result_2 = variant { Ok : PagedResponse; Err : ApiError };
type Result_3 = variant {
  Ok : opt record { nat64; GroupWithMembers };
  Err : ApiError;
};
type Result_4 = variant {
  Ok : record { nat64; GroupWithMembers };
  Err : ApiError;
};
type Result_5 = variant { Ok : bool; Err : ApiError };
type Result_6 = variant { Ok; Err : ApiError };
type Result_7 = variant { Ok : vec principal; Err : ApiError };
type Result_8 = variant { Ok : nat64; Err : ApiError };
type Role = record {
  permissions : vec Permission;
  name : text;
  color : text;
  protected : bool;
  index : opt nat64;
};
type Shard = record { id : principal; filled : bool };
type SortDirection = variant { Asc; Desc };
type TokenGated = record {
  "principal" : principal;
  name : text;
  description : text;
  amount : nat64;
  standard : text;
};
type ValidationResponse = record { field : text; message : text };
service : (vec principal) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  _dev_extend_shards : (nat64) -> (Result);
  _dev_get_shards : () -> (Result) query;
  _dev_set_shard_filled : (principal, bool) -> (Result);
  _dev_upload_wasm : (blob) -> (bool);
  filter : (vec GroupFilter) -> (Result_1) composite_query;
  filter_paginated : (nat64, nat64, GroupSort, vec GroupFilter) -> (
      Result_2,
    ) composite_query;
  find : (vec GroupFilter) -> (Result_3) composite_query;
  get : (nat64) -> (Result_4) composite_query;
  get_all : () -> (Result_1) composite_query;
  get_many : (vec nat64) -> (Result_1) composite_query;
  get_paginated : (nat64, nat64, GroupSort) -> (Result_2) composite_query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  insert : (GroupWithMembers) -> (Result_4);
  insert_by_key : (nat64, GroupWithMembers) -> (Result_4);
  insert_many : (vec GroupWithMembers) -> (Result_1);
  remove : (nat64) -> (Result_5);
  remove_many : (vec nat64) -> (Result_6);
  set_proxies : (vec principal) -> (Result_7);
  size : () -> (Result_8) composite_query;
  update : (nat64, GroupWithMembers) -> (Result_4);
  update_many : (vec record { nat64; GroupWithMembers }) -> (Result_1);
}